const fs = require('fs');
const path = require('path');

const sourceDir = path.join(__dirname, 'uploads'); // Dossier source local
const destDir = '/data/uploads'; // Dossier sur le volume persistant

console.log(`‚öôÔ∏è D√©but de la migration des fichiers...`);
console.log(`Source: ${sourceDir}`);
console.log(`Destination: ${destDir}`);

// V√©rifier si le dossier source existe
if (!fs.existsSync(sourceDir)) {
  console.error('‚ùå Erreur: Le dossier source n\'existe pas');
  process.exit(1);
}

// Cr√©er le dossier de destination si n√©cessaire
if (!fs.existsSync(destDir)) {
  fs.mkdirSync(destDir, { recursive: true });
  console.log(`üìÅ Dossier de destination cr√©√©: ${destDir}`);
}

// Fonction de copie r√©cursive
function copyFolderRecursive(source, target) {
  // Cr√©er le dossier cible s'il n'existe pas
  if (!fs.existsSync(target)) {
    fs.mkdirSync(target);
  }

  // Lire les √©l√©ments du dossier source
  const items = fs.readdirSync(source);
  
  for (const item of items) {
    const srcPath = path.join(source, item);
    const destPath = path.join(target, item);
    
    const stat = fs.lstatSync(srcPath);
    
    if (stat.isDirectory()) {
      // Copier les sous-dossiers r√©cursivement
      copyFolderRecursive(srcPath, destPath);
    } else {
      // Copier les fichiers
      fs.copyFileSync(srcPath, destPath);
      console.log(`‚úÖ Fichier copi√©: ${item}`);
    }
  }
}

// Lancer la migration
try {
  copyFolderRecursive(sourceDir, destDir);
  console.log('üéâ Migration termin√©e avec succ√®s !');
} catch (error) {
  console.error('‚ùå Erreur lors de la migration:', error);
}